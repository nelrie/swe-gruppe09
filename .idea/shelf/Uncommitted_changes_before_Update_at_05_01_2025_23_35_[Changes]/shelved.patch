Index: src/main/java/feedback/application/service/FeedbackService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package feedback.application.service;\r\n\r\nimport java.util.List;\r\nimport java.util.UUID;\r\nimport feedback.infrastructure.repository.FeedbackRepository;\r\nimport feedback.domain.model.Feedback;\r\nimport feedback.exceptions.validation.InputValidator;\r\nimport org.springframework.stereotype.Service;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n@Service\r\npublic class FeedbackService {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(FeedbackService.class);\r\n\r\n    private final FeedbackRepository feedbackRepository;\r\n\r\n    // Konstruktor\r\n    public FeedbackService(FeedbackRepository feedbackRepository) {\r\n        this.feedbackRepository = feedbackRepository;\r\n    }\r\n\r\n\r\n    // Nach GitHub Copilot und Analyse der Metriken wurde die Methode wie folgt geändert:\r\n\r\n    public Feedback erstelleFeedback(String firstName, String lastName, String email, String message) {\r\n\r\n        // Validierung der Eingaben\r\n        validateInput(firstName, lastName, email, message);\r\n\r\n        // Erzeugt eine zufällige ID -> vermeidet doppelte IDs\r\n        String feedbackID = UUID.randomUUID().toString();\r\n\r\n        //Erstellt ein neues Feedback Objekt mit der generierten ID\r\n        Feedback feedback = new Feedback(feedbackID, firstName, lastName, email, message);\r\n\r\n\r\n        //Speicher das Feedback im Repository\r\n        feedbackRepository.save(feedback);\r\n        return feedback;\r\n    }\r\n\r\n    private void validateInput(String firstName, String lastName, String email, String message) {\r\n        if (!InputValidator.isValidFirstName(firstName)) {\r\n            throw new IllegalArgumentException(\"Ungültiger Vorname\");\r\n        }\r\n        if (!InputValidator.isValidLastName(lastName)) {\r\n            throw new IllegalArgumentException(\"Ungültiger Nachname\");\r\n        }\r\n        if (!InputValidator.isValidEmail(email)) {\r\n            throw new IllegalArgumentException(\"Ungültige E-Mail-Adresse\");\r\n        }\r\n        if (!InputValidator.isValidMessage(message)) {\r\n            throw new IllegalArgumentException(\"Nachricht darf nicht leer sein\");\r\n        }\r\n    }\r\n\r\n\r\n    public Feedback findeFeedback(String feedbackID) {\r\n        Feedback feedback = feedbackRepository.findById(feedbackID);\r\n\r\n        logger.info(\"findeFeedback wird ausgeführt\");\r\n        logger.info(\"Feedback: {}\", feedback); // Testen was in feedback gespeichert ist\r\n\r\n        if (feedback == null) {\r\n            throw new IllegalArgumentException(\"Das Feedback konnte nicht gefunden werden.\");\r\n        }\r\n        else\r\n            logger.info(\"Feedback von: {} {} {} {}\", feedback.getFirstName(), feedback.getLastName(), feedback.getEmail(), feedback.getMessage());\r\n        return feedback;\r\n    }\r\n\r\n    public void loescheFeedback(String feedbackID) {\r\n        Feedback feedback = feedbackRepository.findById(feedbackID);\r\n        if (feedback == null) {\r\n            throw new IllegalArgumentException(\"Feedback mit der ID \" + feedbackID + \" konnte nicht gefunden werden.\");\r\n        }\r\n        feedbackRepository.deleteById(feedbackID);\r\n    }\r\n\r\n    public List<Feedback> findeAlleFeedbacks() {\r\n        return feedbackRepository.findAll();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/feedback/application/service/FeedbackService.java b/src/main/java/feedback/application/service/FeedbackService.java
--- a/src/main/java/feedback/application/service/FeedbackService.java	(revision 07d780768c9358af82d0a76365355de738e12a78)
+++ b/src/main/java/feedback/application/service/FeedbackService.java	(date 1736112373392)
@@ -5,9 +5,9 @@
 import feedback.infrastructure.repository.FeedbackRepository;
 import feedback.domain.model.Feedback;
 import feedback.exceptions.validation.InputValidator;
-import org.springframework.stereotype.Service;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.stereotype.Service;
 
 @Service
 public class FeedbackService {
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Die Konfigurationsdatei definiert die verschiedenen Einstellungen und Parameter für die Anwendung\r\n\r\n# H2 Database Konfiguration\r\nspring.datasource.url=jdbc:h2:mem:testdb\r\nspring.datasource.driverClassName=org.h2.Driver\r\nspring.datasource.username=sa\r\nspring.datasource.password=password\r\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\r\n\r\n# Hibernate Konfiguration\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.show-sql=true\r\n\r\n\r\n# Server-Port Konfiguration\r\nserver.port=8080\r\n\r\n# Logging Konfiguration\r\nlogging.level.org.springframework=INFO\r\nlogging.level.com.example=DEBUG\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 07d780768c9358af82d0a76365355de738e12a78)
+++ b/src/main/resources/application.properties	(date 1736018381201)
@@ -10,12 +10,28 @@
 # Hibernate Konfiguration
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.show-sql=true
+spring.jpa.properties.hibernate.format_sql=true
+
+#später wieder löschen
+#spring.main.web-application-type=none
+
 
 
 # Server-Port Konfiguration
 server.port=8080
 
+# AOP
+# Aktiviert das Proxying von Klassen anstelle von Schnittstellen
+spring.aop.proxy-target-class=true 
+status.service.user=Max Mustermann
+
 # Logging Konfiguration
+logging.config=classpath:logback.xml
 logging.level.org.springframework=INFO
-logging.level.com.example=DEBUG
+logging.level.org.springframework.aop=DEBUG
+logging.level.org.springframework.context=DEBUG
+logging.level.feedback=DEBUG
+logging.level.feedback.aspect=INFO
+logging.level.feedback.service=INFO
+logging.level.root=INFO
 
Index: src/main/java/feedback/application/FeedbackApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package feedback.application;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.application.Platform;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\n\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.builder.SpringApplicationBuilder;\r\nimport org.springframework.context.ConfigurableApplicationContext;\r\n\r\nimport java.util.Objects;\r\n\r\n// startet Spring Boot Kontext und initialisiert alle Spring Beans\r\n// erbt gleichzeitig von javafx und startet dadurch den JavaFX Kontext und lädt die Benutzeroberfläche\r\n@SpringBootApplication(scanBasePackages = {\"feedback\"})\r\npublic class FeedbackApplication extends Application {\r\n\r\n    private ConfigurableApplicationContext context;\r\n\r\n    //Spring Boot Kontext starten mit SpringApplicationBuilder\r\n    @Override\r\n    public void init() {\r\n        this.context = new SpringApplicationBuilder(FeedbackApplication.class).run();\r\n    }\r\n\r\n\r\n    // start lädt die fxml Datei und zeigt die JavaFX Benutzeroberfläche\r\n    @Override\r\n    public void start(Stage primaryStage) throws Exception {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/feedback-form.fxml\"));\r\n        fxmlLoader.setControllerFactory(context::getBean);\r\n        Parent root = fxmlLoader.load();\r\n        Scene scene = new Scene(root);\r\n        primaryStage.setTitle(\"Feedback System\");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    // Stop schließt den Spring Boot Kontext und beendet die JavaFX Anwendung\r\n    @Override\r\n    public void stop() {\r\n        this.context.close();\r\n        Platform.exit();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/feedback/application/FeedbackApplication.java b/src/main/java/feedback/application/FeedbackApplication.java
--- a/src/main/java/feedback/application/FeedbackApplication.java	(revision 07d780768c9358af82d0a76365355de738e12a78)
+++ b/src/main/java/feedback/application/FeedbackApplication.java	(date 1736013392345)
@@ -6,21 +6,25 @@
 import javafx.scene.Parent;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
-
-
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.context.ConfigurableApplicationContext;
-
-import java.util.Objects;
+import org.springframework.context.annotation.EnableAspectJAutoProxy;
 
 // startet Spring Boot Kontext und initialisiert alle Spring Beans
 // erbt gleichzeitig von javafx und startet dadurch den JavaFX Kontext und lädt die Benutzeroberfläche
 @SpringBootApplication(scanBasePackages = {"feedback"})
+// Aktiviert automatisch die Unterstützung für Spring AOP
+@EnableAspectJAutoProxy(proxyTargetClass = true)
+
 public class FeedbackApplication extends Application {
 
+
     private ConfigurableApplicationContext context;
 
+//    @Autowired
+//    private StatusService statusService; // Automatische Injektion des StatusService
+
     //Spring Boot Kontext starten mit SpringApplicationBuilder
     @Override
     public void init() {
@@ -31,6 +35,10 @@
     // start lädt die fxml Datei und zeigt die JavaFX Benutzeroberfläche
     @Override
     public void start(Stage primaryStage) throws Exception {
+
+
+//        statusService.sendStatusUpdate(); // Verwende die automatisch injizierte Instanz
+
         FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/fxml/feedback-form.fxml"));
         fxmlLoader.setControllerFactory(context::getBean);
         Parent root = fxmlLoader.load();
@@ -46,7 +54,7 @@
         this.context.close();
         Platform.exit();
     }
-
+    // Startet JavaFX (mit den eingebetteten Spring-Boot-Funktionen)
     public static void main(String[] args) {
         launch(args);
     }
Index: src/main/java/feedback/application/service/StatusService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package feedback.application.service;\r\n\r\nimport status.domain.model.Status;\r\n\r\npublic class StatusService {\r\n\r\n    private Status status;\r\n    private final String userStatus;\r\n\r\n    // Konstruktor\r\n    public StatusService(String userStatus) {\r\n        this.userStatus = userStatus;\r\n        this.status = Status.RECEIVED; // Standard-Status\r\n    }\r\n\r\n    // Methode zum Ändern des Status\r\n    public void setStatus(Status newStatus) {\r\n        this.status = newStatus;\r\n        System.out.println(\"Der Status wurde auf '\" + newStatus.getDescription() + \"' geändert.\");\r\n    }\r\n\r\n    // Methode, um den aktuellen Status abzurufen\r\n    public Status getStatus() {\r\n        return this.status;\r\n    }\r\n\r\n    // Methode zum \"Verschicken\" des Feedback-Status (simuliert)\r\n    public void sendStatusUpdate() {\r\n        System.out.println(\"Der Benutzer '\" + userStatus + \"' hat den Feedback-Status verschickt: \" + status.getDescription());\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/feedback/application/service/StatusService.java b/src/main/java/feedback/application/service/StatusService.java
--- a/src/main/java/feedback/application/service/StatusService.java	(revision 07d780768c9358af82d0a76365355de738e12a78)
+++ b/src/main/java/feedback/application/service/StatusService.java	(date 1736016028875)
@@ -1,9 +1,14 @@
 package feedback.application.service;
 
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import status.domain.model.Status;
 
+
+
 public class StatusService {
-
+    private static final Logger logger = LoggerFactory.getLogger(StatusService.class);
     private Status status;
     private final String userStatus;
 
@@ -14,9 +19,9 @@
     }
 
     // Methode zum Ändern des Status
-    public void setStatus(Status newStatus) {
+    public void setStatus(@NotNull Status newStatus) {
         this.status = newStatus;
-        System.out.println("Der Status wurde auf '" + newStatus.getDescription() + "' geändert.");
+        logger.info("Der Status wurde auf '{}' geändert.", newStatus.getDescription());
     }
 
     // Methode, um den aktuellen Status abzurufen
@@ -26,7 +31,7 @@
 
     // Methode zum "Verschicken" des Feedback-Status (simuliert)
     public void sendStatusUpdate() {
-        System.out.println("Der Benutzer '" + userStatus + "' hat den Feedback-Status verschickt: " + status.getDescription());
+        logger.info("Der Benutzer '{}' hat den Feedback-Status verschickt: {}", userStatus, status.getDescription());
 
     }
 }
Index: .idea/libraries/JavaFX__lib.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"libraryTable\">\r\n  <library name=\"JavaFX: lib\">\r\n    <CLASSES>\r\n      <root url=\"file://$PROJECT_DIR$/../../../../Program Files/JavaFX/javafx-sdk-23.0.1/lib\" />\r\n    </CLASSES>\r\n    <JAVADOC />\r\n    <SOURCES />\r\n    <jarDirectory url=\"file://$PROJECT_DIR$/../../../../Program Files/JavaFX/javafx-sdk-23.0.1/lib\" recursive=\"false\" />\r\n  </library>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/JavaFX__lib.xml b/.idea/libraries/JavaFX__lib.xml
--- a/.idea/libraries/JavaFX__lib.xml	(revision 07d780768c9358af82d0a76365355de738e12a78)
+++ b/.idea/libraries/JavaFX__lib.xml	(date 1736105092831)
@@ -2,9 +2,14 @@
   <library name="JavaFX: lib">
     <CLASSES>
       <root url="file://$PROJECT_DIR$/../../../../Program Files/JavaFX/javafx-sdk-23.0.1/lib" />
+      <root url="file://$PROJECT_DIR$/../../../../Program Files/Java/javafx-sdk-23.0.1/lib" />
     </CLASSES>
     <JAVADOC />
-    <SOURCES />
+    <SOURCES>
+      <root url="file://$PROJECT_DIR$/../../../../Program Files/Java/javafx-sdk-23.0.1" />
+    </SOURCES>
+    <jarDirectory url="file://$PROJECT_DIR$/../../../../Program Files/Java/javafx-sdk-23.0.1/lib" recursive="false" />
     <jarDirectory url="file://$PROJECT_DIR$/../../../../Program Files/JavaFX/javafx-sdk-23.0.1/lib" recursive="false" />
+    <jarDirectory url="file://$PROJECT_DIR$/../../../../Program Files/Java/javafx-sdk-23.0.1" recursive="false" type="SOURCES" />
   </library>
 </component>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>feedback</groupId>\r\n    <artifactId>swe-gruppe09</artifactId>\r\n    <version>1.0.0</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>23</maven.compiler.source>\r\n        <maven.compiler.target>23</maven.compiler.target>\r\n    </properties>\r\n\r\n    <repositories>\r\n        <repository>\r\n            <id>central</id>\r\n            <url>https://repo.maven.apache.org/maven2</url>\r\n        </repository>\r\n    </repositories>\r\n\r\n    <dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-dependencies</artifactId>\r\n            <version>3.3.5</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter</artifactId>\r\n            <version>5.7.0</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <!-- Logger -->\r\n        <dependency>\r\n            <groupId>ch.qos.logback</groupId>\r\n            <artifactId>logback-classic</artifactId>\r\n            <version>1.4.12</version>\r\n        </dependency>\r\n        <!-- Logger -->\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n            <version>2.0.7</version>\r\n        </dependency>\r\n        <!-- AOP-basiertes Logging -->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-aop</artifactId>\r\n        </dependency>\r\n        <!-- Spring Boot Starter Data JPA -->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <!-- H2 Database (für Tests und Entwicklung) -->\r\n        <dependency>\r\n            <groupId>com.h2database</groupId>\r\n            <artifactId>h2</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <!-- Spring Boot Starter Web -->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <!-- Spring Boot Starter Test (für Tests) -->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n            <exclusions>\r\n                <exclusion>\r\n                <groupId>org.xmlunit</groupId>\r\n                <artifactId>xmlunit-core</artifactId>\r\n                </exclusion>\r\n            </exclusions>\r\n        </dependency>\r\n        <dependency>\r\n        <groupId>org.xmlunit</groupId>\r\n        <artifactId>xmlunit-core</artifactId>\r\n        <version>2.10.0</version>\r\n        </dependency>\r\n        <!-- JavaFX Controls -->\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-controls</artifactId>\r\n            <version>23.0.1</version>\r\n        </dependency>\r\n        <!-- JavaFX FXML -->\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-fxml</artifactId>\r\n            <version>23.0.1</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <version>3.13.0</version>\r\n                <configuration>\r\n                    <source>23</source>\r\n                    <target>23</target>\r\n                </configuration>\r\n            </plugin>\r\n            <plugin> <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-surefire-plugin</artifactId>\r\n                <version>3.5.2</version>\r\n            </plugin>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-surefire-report-plugin</artifactId>\r\n                <version>3.5.2</version>\r\n            </plugin>\r\n            <plugin>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <version>3.3.5</version>\r\n            </plugin>\r\n            <plugin>\r\n                <groupId>org.jacoco</groupId>\r\n                <artifactId>jacoco-maven-plugin</artifactId>\r\n                <version>0.8.12</version>\r\n                <executions>\r\n                    <execution>\r\n                        <goals>\r\n                            <goal>prepare-agent</goal>\r\n                        </goals>\r\n                    </execution>\r\n                    <execution>\r\n                        <id>report</id>\r\n                        <phase>test</phase>\r\n                        <goals>\r\n                            <goal>report</goal>\r\n                        </goals>\r\n                    </execution>\r\n\r\n                    <execution>\r\n                        <id>jacoco-check</id>\r\n                        <goals>\r\n                            <goal>check</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <rules>\r\n                                <rule>\r\n                                    <element>PACKAGE</element>\r\n                                    <!--\r\n                                    <limits>\r\n                                        <limit>\r\n                                            <counter>LINE</counter>\r\n                                            <value>COVEREDRATIO</value>\r\n                                            <minimum>0.8</minimum>\r\n                                        </limit>\r\n                                    </limits>\r\n                                    -->\r\n                                </rule>\r\n                            </rules>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n            <!-- JavaFX Maven Plugin -->\r\n            <plugin>\r\n                <groupId>org.openjfx</groupId>\r\n                <artifactId>javafx-maven-plugin</artifactId>\r\n                <version>0.0.8</version>\r\n                <configuration>\r\n                    <mainClass>feedback.JavaFxApplication</mainClass>\r\n                    <options>\r\n                        <option>--module-path</option>\r\n                        <option>${java.home}/lib</option>\r\n                        <option>--add-modules</option>\r\n                        <option>javafx.controls,javafx.fxml</option>\r\n                    </options>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 07d780768c9358af82d0a76365355de738e12a78)
+++ b/pom.xml	(date 1736110845186)
@@ -38,23 +38,12 @@
             <version>5.7.0</version>
             <scope>test</scope>
         </dependency>
-        <!-- Logger -->
-        <dependency>
-            <groupId>ch.qos.logback</groupId>
-            <artifactId>logback-classic</artifactId>
-            <version>1.4.12</version>
-        </dependency>
-        <!-- Logger -->
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>2.0.7</version>
-        </dependency>
-        <!-- AOP-basiertes Logging -->
+
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-aop</artifactId>
+            <artifactId>spring-boot-starter</artifactId>
         </dependency>
+
         <!-- Spring Boot Starter Data JPA -->
         <dependency>
             <groupId>org.springframework.boot</groupId>
@@ -100,6 +89,42 @@
             <artifactId>javafx-fxml</artifactId>
             <version>23.0.1</version>
         </dependency>
+
+       <!-- Logger-->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-logging</artifactId>
+        </dependency>
+        <!-- AOP-basiertes Logging -->
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-aop</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.jetbrains</groupId>
+            <artifactId>annotations</artifactId>
+            <version>RELEASE</version>
+            <scope>compile</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.aspectj</groupId>
+            <artifactId>aspectjrt</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-junit-jupiter</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-actuator</artifactId>
+        </dependency>
     </dependencies>
 
 
